@using InnoGotchiGameFrontEnd.Presentation.Infrastructure;

@page "/mail"
@inherits CancellableComponent
@inject IStorageService localStorageService;
@inject AuthenticationStateProvider stateProvider
@inject UserManager userManager
@inject ColaborationRequestManager requestManager

@if (User != null)
{
    <div>
        <h3>Mail</h3>
        @if (IsLoading)
        {
            <Loading />
        }
        @if (IsLettersContains)
        {
            <div>
                @foreach (var error in Errors)
                {
                    <p class="text-danger">@error</p>
                }
            </div>

            @foreach (var request in User.UnconfirmedRequests)
            {
                @if (request.RequestSender != null)
                {
                    <UserRow User="request.RequestSender">
                        <div class="col">
                            <div>
                                <NavLink class="btn btn-primary" href=@($"/users/{request.RequestSender.Id}")>
                                    Подробнее
                                </NavLink>
                            </div>
                        </div>
                        <div class="col">
                            <p>
                                Хочет дружить с вами
                            </p>
                        </div>
                        <div class="col">
                            <div>
                                <button class="btn btn-success w-75" @onclick="@(e => ConfirmRequest(request.Id))">
                                    Принять
                                </button>
                            </div>
                            <div>
                                <button class="btn btn-danger w-75" @onclick="@(e => RejectRequest(request.Id))">
                                    Отвергнуть
                                </button>
                            </div>
                        </div>
                    </UserRow>
                }
                else
                {
                    <div>Loading</div>
                }
            }
            @foreach (var request in User.RejectedRequests)
            {
                @if (request.RequestReceiver != null)
                {
                    <UserRow User="request.RequestReceiver">
                        <div class="col">
                            <div>
                                <NavLink class="btn btn-primary" href=@($"/users/{request.RequestReceiver.Id}")>
                                    Подробнее
                                </NavLink>
                            </div>
                        </div>
                        <div class="col">
                            <p>
                                Отверг предложение о дружбе
                            </p>
                        </div>
                        <div class="col">
                            <div>
                                <button class="btn btn-danger w-75" @onclick="@(e => DeleteRequest(request.Id))">
                                    Эхххх(
                                </button>
                            </div>
                        </div>
                    </UserRow>
                }
                else
                {
                    <Loading />
                }
            }
        }
        else
        {
            <div class="w-100 h-100 align-content-center">
                <h2>В вашей почте нет писем((</h2>
            </div>
        }
    </div>
}
else
{
    <Loading />
}
@code {
    private bool IsLoading { get; set; }
    private List<string> Errors;
    private UserDTO User { get; set; }
    private bool IsLettersContains => User.UnconfirmedRequests.Count() + User.RejectedRequests.Count() > 0;

    protected override async Task OnInitializedAsync()
    {
        Errors = new List<string>();
        var state = await stateProvider.GetAuthenticationStateAsync();
        var id = int.Parse(state.User.FindFirst(nameof(SecurityToken.UserId)).Value);

        User = await userManager.GetByIdAsync(id, _cts.Token);
        foreach (var request in User.UnconfirmedRequests)
        {
            request.RequestSender = await userManager.GetByIdAsync(request.RequestSenderId, _cts.Token);
        }
        foreach (var request in User.RejectedRequests)
        {
            request.RequestReceiver = await userManager.GetByIdAsync(request.RequestReceiverId, _cts.Token);
        }
    }

    private async Task ConfirmRequest(int requestId)
    {
        IsLoading = true;
        var rez = await requestManager.ConfirmAsync(requestId, User, _cts.Token);
        if (!rez.IsComplete)
        {
            Errors = rez.Errors;            
        }

        IsLoading = false;
    }
    private async Task RejectRequest(int requestId)
    {
        IsLoading = true;
        var rez = await requestManager.RejectAsync(requestId, User, _cts.Token);
        if (rez.IsComplete)
        {
        }
        else
        {
            Errors = rez.Errors;
        }
        IsLoading = false;
    }
    private async Task DeleteRequest(int requestId)
    {
        IsLoading = true;
        var rez = await requestManager.DeleteByIdAsync(requestId, _cts.Token);
        if (rez.IsComplete)
        {
            User.RejectedRequests = User.RejectedRequests.Where(x => x.Id != requestId);
        }
        else
        {
            Errors = rez.Errors;
        }
        IsLoading = false;
    }
}
