@page "/farms/create"
@using AuthorizationInfrastructure;
@using AuthorizationInfrastructure.Tokens;
@using InnoGotchiGameFrontEnd.Presentation.Infrastructure;
@attribute [Authorize]
@inherits CancellableComponent
@inject IStorageService localStorageService;
@inject NavigationManager navigation;
@inject FarmManager farmManager;
@inject UserManager userManager;

@if (!IsLoading)
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div>
                @foreach (var error in Errors)
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <EditForm Model="@Data" OnValidSubmit="CreateAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="form-label">Введите название вашей супер уникальной фермы!!</label>
                    <InputText @bind-Value="Data.Name" class="form-control" />
                </div>
                <br/>
                <div class="row">
                    <div class="col-md-6 offset-md-4">
                        <input class="btn btn-primary" type="submit"  value="Создать"/>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <Loading />
        </div>
    </div>
}
@code {
    private bool IsLoading { get; set; }
    private List<String> Errors = new List<string>();
    private AddFarmDTOModel Data;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        Data = new AddFarmDTOModel();
        IsLoading = false;
    }

    private async Task CreateAsync()
    {
        IsLoading = true;
        var result = await farmManager.CreateAsync(Data, _cts.Token);
        if (!result.IsComplete)
        {
            Errors = result.Errors;
        }
        else
        {
            var token = await localStorageService.GetAsync<SecurityToken>(nameof(SecurityToken));
            token.FarmId = (await userManager.GetAuthodizedUserAsync(_cts.Token)).OwnPetFarmId;
            await localStorageService.SetAsync<SecurityToken>(nameof(SecurityToken), token);
            navigation.NavigateTo("/");
        }
        IsLoading = false;
    }
}
