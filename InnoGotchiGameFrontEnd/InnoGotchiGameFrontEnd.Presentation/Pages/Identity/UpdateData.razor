@page "/updateData"
@using AuthorizationInfrastructure.Tokens;
@using InnoGotchiGameFrontEnd.BLL.ComandModels.User;
@attribute [Authorize]
@inherits CancellableComponent
@inject AuthenticationStateProvider stateProvider;
@inject UserManager manager;
@inject IConfiguration configuration;
@inject NavigationManager navigation;

@if (!IsLoading)
{
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <EditForm Model="@Data" OnValidSubmit="UpdateAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="form-label">FirstName</label>
                    <InputText @bind-Value="@Data.FirstName" class="form-control bg-opacity-25" />
                </div>
                <div class="form-group">
                    <label class="form-label">LastName</label>
                    <InputText @bind-Value="@Data.LastName" class="form-control bg-opacity-25" />
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label class="form-label">Avatar</label>
                        <InputFile OnChange="@OnFileSelected" accept=".jpeg,.jpg,.png" class="form-control bg-opacity-25" />
                    </div>
                    @if (Data.Picture != null)
                    {
                        <div class="col-md-3">
                            <ImageFromByteArray Image="@Data.Picture.Image" imgClass="img-fluid img-thumbnail" />
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="col-md-6 offset-md-3">
                        <input class="btn btn-primary" value="Обновить данные" type="submit" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <Loading />
        </div>
    </div>
}

@code {
    private bool IsLoading { get; set; }
    private UpdateUserDTODataModel Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var state = await stateProvider.GetAuthenticationStateAsync();
        var id = int.Parse(state.User.FindFirst(nameof(SecurityToken.UserId)).Value);
        var user = await manager.GetByIdAsync(id, _cts.Token);
        Data = new UpdateUserDTODataModel()
            {
                UpdatedId = id,
                FirstName = user.FirstName,
                LastName = user.LastName
            };
        if (user.Picture != null)
        {
            Data.Picture = user.Picture;
        }
        IsLoading = false;
    }
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var stream = new MemoryStream();
        var file = e.File;
        string imageType = file.ContentType;
        int imgSize = int.Parse(configuration.GetSection("ImageSizePx").Value);
        file = await file.RequestImageFileAsync(imageType, imgSize, imgSize);
        await file.OpenReadStream().CopyToAsync(stream);
        Data.Picture = new PictureDTO()
            {
                Name = Guid.NewGuid().ToString(),
                Description = "user_avatar",
                Format = imageType,
                Image = stream.ToArray()
            };
        this.StateHasChanged();
    }
    private async Task UpdateAsync()
    {
        IsLoading = true;
        await manager.UpdateDataAsync(Data, _cts.Token);
        IsLoading = false;
        navigation.NavigateTo("/");

    }
}
