@page "/updatePassword"
@using AuthorizationInfrastructure.Tokens;
@using InnoGotchiGameFrontEnd.Presentation.Pages.Identity.Models;

@attribute [Authorize]
@inherits CancellableComponent
@inject AuthenticationStateProvider stateProvider;
@inject UserManager manager;
@inject NavigationManager navigation;

@if (!IsLoading)
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div>
                @foreach (var error in Errors)
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <EditForm Model="updateModel" OnValidSubmit="UpdateAsync" class="form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="form-label">Старый пароль</label>
                    <InputText @bind-Value="@updateModel.OldPassword" type="password" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-label">Новый пароль</label>
                    <InputText @bind-Value="@updateModel.NewPassword" type="password" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-label">Повторите новый пароль</label>
                    <InputText @bind-Value="@updateModel.ConfirmPassword" type="password" class="form-control" />
                </div>
                <div class="row">
                    <div class="col-md-6 offset-md-3">
                        <input class="btn btn-primary" type="submit" value="Установить новый пароль" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <Loading />
        </div>
    </div>
}
@code {
    private List<string> Errors { get; set; }
    private bool IsLoading { get; set; }
    private UpdateUserDTOPasswordModel updateModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var state = await stateProvider.GetAuthenticationStateAsync();
        var id = int.Parse(state.User.FindFirst(nameof(SecurityToken.UserId))!.Value);
        updateModel = new UpdateUserDTOPasswordModel()
            {
                UpdatedId = id
            };
        Errors = new List<string>();
        IsLoading = false;
    }
    private async Task UpdateAsync()
    {
        IsLoading = true;
        var result = await manager.UpdatePasswordAsync(updateModel, _cts.Token);
        if (!result.IsComplete)
        {
            Errors = result.Errors;
            IsLoading = false;
            return;
        }

        navigation.NavigateTo("/");  
        IsLoading = false;

    }
}
