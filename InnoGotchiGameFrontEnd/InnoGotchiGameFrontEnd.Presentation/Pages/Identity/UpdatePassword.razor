@page "/updatePassword"
@using InnoGotchiGameFrontEnd.BLL.ComandModels.User;
@using InnoGotchiGameFrontEnd.Presentation.Pages.Identity.Models;
@attribute [Authorize]
@inject AuthenticationStateProvider stateProvider;
@inject UserManager manager;
@inject NavigationManager navigation;

@if (!IsLoading)
{
    <div>
        @foreach (var error in Errors)
        {
            <p class="text-danger">@error</p>
        }
    </div>
    <EditForm Model="Data" OnValidSubmit="UpdateAsync" class="form">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="form-label">Старый пароль</label>
            <InputText @bind-Value="@Data.OldPassword" type="password"  class="form-control" />
        </div>
        <div class="form-group">
            <label class="form-label">Новый пароль</label>
            <InputText @bind-Value="@Data.NewPassword" type="password" class="form-control" />
        </div>
        <div class="form-group">
            <label class="form-label">Повторите новый пароль</label>
            <InputText @bind-Value="@Data.ConfirmPassword" type="password" class="form-control" />
        </div>
        <input type="submit" />
    </EditForm>
}
else
{
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <Loading />
        </div>
    </div>
}
@code {
    private List<string> Errors { get; set; }
    private bool IsLoading { get; set; }
    private UpdatePasswordData Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var state = await stateProvider.GetAuthenticationStateAsync();
        var id = int.Parse(state.User.FindFirst(nameof(SecurityToken.UserId)).Value);
        Errors = new List<string>();
        Data = new UpdatePasswordData();
        IsLoading = false;
    }
    private async Task UpdateAsync()
    {
        if (Data.NewPassword != Data.ConfirmPassword)
        {
            Errors.Add("Новые пароль не совпадает с повтором");
            return;
        }
        IsLoading = true;
        var state = await stateProvider.GetAuthenticationStateAsync();
        var id = int.Parse(state.User.FindFirst(nameof(SecurityToken.UserId)).Value);
        var updateModel = new UpdateUserDTOPasswordModel()
        {
           UpdatedId = id,
           OldPassword = Data.OldPassword,
           NewPassword = Data.NewPassword
        };
        var rezult = await manager.UpdateUserPassword(updateModel);
        this.StateHasChanged();
        if (!rezult.IsComplete)
        {
            Errors = rezult.Errors;
        }
        else
        {
            navigation.NavigateTo("/");
        }
        IsLoading = false;

    }
}
